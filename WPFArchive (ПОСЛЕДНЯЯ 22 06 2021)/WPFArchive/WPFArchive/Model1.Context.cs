//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WPFArchive
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class archiveEntities : DbContext
    {
        public archiveEntities()
            : base("name=archiveEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<access> access { get; set; }
        public virtual DbSet<categoryOfSet> categoryOfSet { get; set; }
        public virtual DbSet<collectionProfile> collectionProfile { get; set; }
        public virtual DbSet<cupboard> cupboard { get; set; }
        public virtual DbSet<document> document { get; set; }
        public virtual DbSet<documentType> documentType { get; set; }
        public virtual DbSet<event_logbook> event_logbook { get; set; }
        public virtual DbSet<heating> heating { get; set; }
        public virtual DbSet<nomenclature> nomenclature { get; set; }
        public virtual DbSet<organization> organization { get; set; }
        public virtual DbSet<organizationArchive> organizationArchive { get; set; }
        public virtual DbSet<ownForm> ownForm { get; set; }
        public virtual DbSet<receivingForm> receivingForm { get; set; }
        public virtual DbSet<renamesOfOrganization> renamesOfOrganization { get; set; }
        public virtual DbSet<setOfDocs> setOfDocs { get; set; }
        public virtual DbSet<shelving> shelving { get; set; }
        public virtual DbSet<typeOfEvent> typeOfEvent { get; set; }
    
        public virtual ObjectResult<DocumentsOfSet_Select_Result> DocumentsOfSet_Select(Nullable<int> setOfDocs_idSet)
        {
            var setOfDocs_idSetParameter = setOfDocs_idSet.HasValue ?
                new ObjectParameter("setOfDocs_idSet", setOfDocs_idSet) :
                new ObjectParameter("setOfDocs_idSet", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DocumentsOfSet_Select_Result>("DocumentsOfSet_Select", setOfDocs_idSetParameter);
        }
    
        public virtual ObjectResult<Nomenclature_ForOrgAndYear_Result> Nomenclature_ForOrgAndYear(Nullable<int> organization_idOrg, Nullable<int> yearNom)
        {
            var organization_idOrgParameter = organization_idOrg.HasValue ?
                new ObjectParameter("organization_idOrg", organization_idOrg) :
                new ObjectParameter("organization_idOrg", typeof(int));
    
            var yearNomParameter = yearNom.HasValue ?
                new ObjectParameter("yearNom", yearNom) :
                new ObjectParameter("yearNom", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nomenclature_ForOrgAndYear_Result>("Nomenclature_ForOrgAndYear", organization_idOrgParameter, yearNomParameter);
        }
    
        public virtual ObjectResult<Nomenclature_Select_Result> Nomenclature_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nomenclature_Select_Result>("Nomenclature_Select");
        }
    
        public virtual ObjectResult<SelectEventLogbookForOrg_Result> SelectEventLogbookForOrg(Nullable<int> organization_idOrg)
        {
            var organization_idOrgParameter = organization_idOrg.HasValue ?
                new ObjectParameter("organization_idOrg", organization_idOrg) :
                new ObjectParameter("organization_idOrg", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectEventLogbookForOrg_Result>("SelectEventLogbookForOrg", organization_idOrgParameter);
        }
    
        public virtual ObjectResult<SelectOrgForMainForm_Result> SelectOrgForMainForm()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectOrgForMainForm_Result>("SelectOrgForMainForm");
        }
    
        public virtual ObjectResult<SelectRenameForOrg_Result> SelectRenameForOrg(Nullable<int> organization_idOrg)
        {
            var organization_idOrgParameter = organization_idOrg.HasValue ?
                new ObjectParameter("organization_idOrg", organization_idOrg) :
                new ObjectParameter("organization_idOrg", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectRenameForOrg_Result>("SelectRenameForOrg", organization_idOrgParameter);
        }
    
        public virtual ObjectResult<SetOfDocs_Select_Result> SetOfDocs_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SetOfDocs_Select_Result>("SetOfDocs_Select");
        }
    }
}
